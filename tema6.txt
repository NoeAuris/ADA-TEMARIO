Ejercicios y dudas clase pasada
Librerías externas
pip
pip es un sistema de gestión de paquetes utilizado para instalar y administrar paquetes de software escritos en Python.

Interfaz línea de comando
Una ventaja importante de pip es la facilidad de su interfaz de línea de comandos, el cual permite instalar paquetes de software de Python fácilmente desde solo una orden:

pip install nombre-paquete

Los usuarios también pueden fácilmente desinstalar algún paquete:

pip uninstall nombre-paquete

Otra característica particular de pip es que permite gestionar listas de paquetes y sus números de versión correspondientes a través de un archivo de requisitos. Esto nos permite una recreación eficaz de un conjunto de paquetes en un entorno separado (p. ej. otro ordenador) o entorno virtual. Esto se puede conseguir con un archivo correctamente formateado requisitos.txt y la siguiente orden:

pip install -r requisitos.txt

Esto último nos va a resultar muy util cuando trabajemos en un proyecto grande, donde tengamos varias dependencias de librerías externas.

Ejemplo python-weather
Las librerías externas nos permiten hacer y utilizar Python para múltiples herramientas. Imaginemos que queremos utilizar el estado del clima actual, para mostrar por pantalla. Para eso podemos bien utilizar una API externa y escribir el código para obtener la información, o utilizar directamente una librería Python que ya lo tenga resuelto. En nuestro caso, vamos a elegir la segunda opcion.

La librería que podemos utilizar (hay varias) es https://pypi.org/project/python-weather/

Lo primero que necesitamos hacer es ir a Pycharm, y en la pestaña inferior, donde dice Terminal, escribir:

pip install python-weather

eguimos el ejemplo que nos dice la página de la librería:

# import the module
import python_weather
import asyncio

async def getweather():
    # declare the client. format defaults to metric system (celcius, km/h, etc.)
    client = python_weather.Client(format=python_weather.IMPERIAL)

    # fetch a weather forecast from a city
    weather = await client.find("Washington DC")

    # returns the current day's forecast temperature (int)
    print(weather.current.temperature)

    # get the weather forecast for a few days
    for forecast in weather.forecasts:
        print(str(forecast.date), forecast.sky_text, forecast.temperature)

    # close the wrapper once done
    await client.close()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(getweather())


Ahora bien, en este ejemplo se hace uso de un recurso que no vamos a ver en este curso y es programación asincona, si quieren saber mas: https://docs.python.org/es/3/library/asyncio.html

En cambio, vamos a utilizar una forma reducida y vamos a crear nuestro propio modulo de clima.py (ver Ejemplos clase-06)

Manejo de archivos
Veremos en esta clase cómo manejar archivos desde nuestros programas. Existen dos formas básicas de acceder a un archivo, una es utilizarlo como un archivo de texto, que procesaremos línea por línea; la otra es tratarlo como un archivo binario, que procesaremos byte por byte.

En Python, para abrir un archivo usaremos la función open, que recibe el nombre del archivo a abrir.

archivo = open("archivo.txt")

Esta función intentará abrir el archivo con el nombre indicado. Si tiene éxito, devolverá una variable que nos permitirá manipular el archivo de diversas maneras.

La operación más sencilla a realizar sobre un archivo es leer su contenido. Para procesarlo línea por línea, es posible hacerlo de la siguiente forma:

linea = archivo.readline()
while linea != '':
    # procesar linea
    linea = archivo.readline()

Esto funciona ya que cada archivo que se encuentre abierto tiene una posición asociada, que indica el último punto que fue leido. Cada vez que se lee una línea, avanza esa posición. Es por ello que readline() devuelve cada vez una línea distinta y no siempre la misma.

La siguiente estructura es una forma equivalente a la vista en el ejemplo anterior.

for linea in archivo:
    # procesar línea

De esta manera, la variable línea irá almacenando distintas cadenas correspondientes a cada una de las líneas del archivo.

Es posible, además, obtener todas las líneas del archivo utilizando una sola llamada a función:

líneas = archivo.readlines()

En este caso, la variable líneas tendrá una lista de cadenas con todas las líneas del archivo.

Al terminar de trabajar con un archivo, es recomendable cerrarlo, por diversos motivos: en algunos sistemas los archivos sólo pueden ser abiertos de a un programa por la vez; en otros, lo que se haya escrito no se guardará realmente hasta no cerrar el archivo; o el limite de cantidad de archivos que puede manejar un programa puede ser bajo, etc.

Para cerrar un archivo simplemente se debe llamar a:

archivo.close()

Procesando un archivo
Por ejemplo, para mostrar todas las líneas de un archivo, precedidas por el número de línea, podemos hacerlo de la siguiente forma:

archivo = open("archivo.txt")
i = 1
for linea in archivo:
    linea = linea.replace('\n', '')
    print " %4d: %s" % (i, linea)
    i+=1
archivo.close()

La llamada a replace es necesaria ya que cada línea que se lee del archivo contiene un fin de línea y con la llamada a replace("\n", "") se remueve.

Otra opción para hacer exactamente lo mismo seria utilizar la función de Python enumerate(secuencia). Esta función devuelve un contador por cada uno de los elementos que se recorren, puede usarse con cualquier tipo de secuencia, incluyendo archivos.

archivo = open('archivo.txt')
for contador, linea in enumerate(archivo):
    linea_sin_enter = linea.replace('\n', '')  # en Windows \r\n
    print(f"{contador}: {linea_sin_enter}")


Nota
Los archivos de texto son sencillos de manejar, pero existen por lo menos tres formas distintas de marcar un fin de línea. En Unix tradicionalmente se usa el caracter \n (valor de ASCII 10, definido como nueva línea) para el fin de línea, mientras que en Macintosh el fin de línea se solía representar como un \r (valor ASCII 13, definido como retorno de carro) y en Windows se usan ambos caracteres \r\n. Si bien esto es algo que hay que tener en cuenta en una diversidad de casos, en particular en Python por omisión se maneja cualquier tipo de fin de línea como si fuese un \n, salvo que se le pida lo contrario. Para manejar los caracteres de fin de línea a mano se puede poner una U en el parámetro modo que le pasamos a open.

Escribiendo un archivo
La función open recibe un parámetro opcional para indicar el modo en que se abrirá el archivo. Los tres modos de apertura que se pueden especificar son:

Modo de sólo lectura (r). En este caso no es posible realizar modificaciones sobre el archivo, solamente leer su contenido.
Modo de sólo escritura (w). En este caso el archivo es truncado (vaciado) si existe, y se lo crea si no existe.
Modo sólo escritura posicionándose al final del archivo (a). En este caso se crea el archivo, si no existe, pero en caso de que exista se posiciona al final, manteniendo el contenido original.
Por otro lado, en cualquiera de estos modos se puede agregar un + para pasar a un modo lectura-escritura. El comportamiento de r+ y de w+ no es el mismo, ya que en el primer caso se tiene el archivo completo, y en el segundo caso se trunca el archivo, perdiendo así los datos. Si un archivo no existe y se lo intenta abrir en modo lectura, se generará un error; en cambio si se lo abre para escritura, Python se encargará de crear el archivo al momento de abrirlo, ya sea con w, a, w+ o con a+. En caso de que no se especifique el modo, los archivos serán abiertos en modo sólo lectura (r).

De la misma forma que para la lectura, existen dos formas distintas de escribir a un archivo. Mediante cadenas:

archivo.write(cadena)

O mediante listas de cadenas:

archivo.writelines(lista_de_cadenas)

Así como la función read devuelve las líneas con los caracteres de fin de línea (\n), será necesario agregar los caracteres de fin de línea a las cadenas que se vayan a escribir en el archivo.

saludo = open("mi_hola.txt", "w")
saludo.write("Hola Chicas")
saludo.close()

🚀 Recursos de la clase
https://python-para-impacientes.blogspot.com/2014/12/fundamentos-para-procesar-imagenes-con.html

https://es.wikipedia.org/wiki/Pip_(administrador_de_paquetes)

https://pypi.org/project/python-weather/

https://ellibrodepython.com/ficheros-python