Protocolo HTTP - Rutas Flask - Trabajo Final
Ejercicios y dudas clase pasada
Debemos tener todos los ejercicios resueltos para hacer el Trabajo Final. La idea es unir varios de los conceptos que vimos hasta ahora. Seguramente necesitemos modificar y adaptar algunas de las funciones que ya hicimos. Si tenemos en claro lo que se resolvió, los ajustes son simples.

Trabajo final
El Trabajo consta de una web donde tenemos 2 pestañas:

1) Movimientos

Vemos los datos de la cuenta:

El saludo debe ser el que se pidió en los ejercicios.
Los movimientos muestran los ultimos 20 movimientos de la Cuenta.
(PROBLEMA: las cuentas tienen 1 persona? o 1 persona tiene una lista de cuentas?)

2) Proceso de Archivos

Tenemos las 3 operaciones que ya trabajamos
Cada vez que se procesa el archivo, se deben agregar movimientos a la cuenta. No tenemos forma de detectar si ya procesamos un archivo.
Agregando Parametros a nuestro servidor
Si un cliente utiliza el protocolo HTTP en un servidor web para solicitar un determinado recurso, el cliente envía al servidor ciertos parámetros GET a través de la URL solicitada. Estos parámetros son pares de nombres y sus valores correspondientes, los llamados pares nombre-valor.

Por ejemplo:

http://127.0.0.1:5000/home-banking/?nro_de_cuenta=0003912

En este caso, estamos pidiendole al servidor:

la url home-banking
con 1 parametro: nro_de_cuenta con valor 0003912
Podemos agregar varios parámetros uniendolos con el caracter &. Por ejemplo:

http://127.0.0.1:5000/home-banking/?nro_de_cuenta=0003912&moneda=pesos

la url home-banking
con 2 parametros: nro_de_cuenta con valor 0003912 y moneda con valor pesos
POST Vs GET
En las páginas web actuales, los clientes (también llamados navegadores) no solo obtienen un elemento HTML del servidor, sino que también envían información como la siguiente:

El texto de búsqueda que el usuario ha escrito en el motor de búsqueda

El contenido de los formularios

El filtro de selección en tiendas online

El orden de una lista

Para enviar ciertos tipos de información al servidor, el protocolo HTTP provee diferentes métodos de petición. Los dos más importantes son GET y POST, los cuales, aunque entregan los mismos resultados, revelan algunas diferencias entre ellos. Lee a continuación cuáles son estas diferencias y cuándo conviene utilizar uno u otro.

GET
Con el método GET, los datos que se envían al servidor se escriben en la misma dirección URL. En la ventana del navegador, lo encontrarás así:

www.ejemplo.com/registrarse.php?nombre=pedro&apellido=perez&edad=55&genero=hombre Toda la información introducida por el usuario (los llamados “parámetros URL”) se transmiten tan abiertamente como el URL en sí mismo. Esto tiene ventajas y desventajas.

Ventajas de GET
Los parámetros URL se pueden guardar junto a la dirección URL como marcador. De esta manera, puedes introducir una búsqueda y más tarde consultarla de nuevo fácilmente. También se puede volver a acceder a la página a través del historial del navegador.

Esto resulta práctico, por ejemplo, si visitas con asiduidad un mismo lugar en Google Maps o si guardas páginas web con configuraciones de filtro determinadas.

Desventajas de GET
La mayor desventaja del método GET es su débilprotección de los datos. Los parámetros URL que se envían quedan visibles en la barra de direcciones del navegador y son accesibles sin clave en el historial de navegación, en el caché y en el log de los servidores.

Otra desventaja es que su capacidad es limitada: dependiendo del servidor y del navegador, no es posible introducir más de 2000 caracteres. Además, los parámetros URL solo pueden contener caracteres ASCII (letras, números, signos, etc.) y no datos binarios como archivos de audio o imágenes.

POST
El método POST introduce los parámetros en la solicitud HTTP para el servidor. Por ello, no quedan visibles para el usuario. Además, la capacidad del método POST es ilimitada.

Ventajas de POST
En lo relativo a los datos, como, por ejemplo, al rellenar formularios con nombres de usuario y contraseñas, el método POST ofrece mucha discreción. Los datos no se muestran en el caché ni tampoco en el historial de navegación. La flexibilidad del método POST también resulta muy útil: no solo se pueden enviar textos cortos, sino también otros tipos de información, como fotos o vídeos.

Desventajas de POST
Cuando una página web que contiene un formulario se actualiza (por ejemplo, cuando se retrocede a la página anterior) los datos del formulario debentransferirse de nuevo (puede que alguna vez hayas recibido una de estas advertencias). Por este motivo, existe el riesgo de que los datos se envíen varias veces por error, lo que, en el caso de una tienda online, puede dar lugar a pedidos duplicados. No obstante, las webs modernas de las tiendas suelen estar preparadas para evitar este tipo de problemas. Además, los datos transferidos con el método POST no pueden guardarsejunto al URL como marcador.


¿Cuándo usar uno u otro?
El método POST es aconsejable cuando el usuario debe enviar datos o archivos al servidor, como, por ejemplo, cuando se rellenan formularios o se suben fotos.

El método GET es adecuado para la personalización de páginas web: el usuario puede guardar búsquedas, configuraciones de filtros y ordenaciones de listas junto al URL como marcadores, de manera que en su próxima visita la página web se mostrará según sus preferencias.

A modo de resumen:

GET para la configuración de páginas web (filtros, ordenación, búsquedas, etc.)

POST para la transferencia de información y datos

Enrutamiento en Flask - URLs / Endpoints
El objeto Flask app nos proporciona un decorador router que es capaz de filtrar la función vista que se va ejecutar analizando la petición HTTP, fundamentalmente por la ruta y el método que se hace la petición.

Veamos un ejemplo:

...
@app.route('/')
def inicio():
    return 'Página principal'   

@app.route('/articulos/')
def articulos():
    return 'Lista de artículos' 

@app.route('/acercade')
def acercade():
    return 'Página acerca de...'

En este caso se comprueba la ruta de la petición HTTP, y cuando coincide con alguna indicada en las rutas se ejecuta la función correspondiente devolviendo una respuesta HTTP.

Rutas Flask

Si declaramos rutas terminando en / son consideradas como un directorio de un sistema de fichero, en este caso si se accede a la ruta sin la barra final se producirá una redirección a la ruta correcta. Si declaramos la rutas sin / final, se consideran un fichero del sistema de fichero, si accedemos a la ruta con el / nos devolverá una respuesta con código 404.

Rutas Flask

Si la ruta de la petición HTTP no corresponde con ninguna que hayamos indicado se devolverá una respuesta con código de estado 404 indicando que no se ha encontrado el recurso.

Podemos gestionar rutas variables, es decir que correspondan a un determinado patrón o expresión regular, por ejemplo:

@app.route("/articulos/<int:id>")
def mostrar_ariculo(id):
    return 'Vamos a mostrar el artículo con id:{}'.format(id)


Rutas Flask

Otro ejemplo:

@app.route("/hello/")
@app.route("/hello/<string:nombre>")
@app.route("/hello/<string:nombre>/<int:edad>")
def hola(nombre=None,edad=None):
    if nombre and edad:
        return 'Hola, {0} tienes {1} años.'.format(nombre,edad)
    elif nombre:
        return 'Hola, {0}'.format(nombre)
    else:
        return 'Hola mundo'


La parte dinámica de la ruta la podemos obtener como variable que recibe la función correspondiente. En el segundo ejemplo, además observamos que varias rutas pueden ejecutar una misma función. Recordamos que aunque no es obligatorio podemos especificar el tipo de la variable capturada:

string: Acepta cualquier texto sin barras (por defecto)

int: Acepta enteros

float: Acepta valores reales

path: Acepta cadena de caracteres con barras

Podemos importar la función url_for que nos permite construir rutas a partir del nombre de la función asociada. De esta manera en la siguiente ruta voy a generar tres enlaces a las rutas dinámicas que hemos visto anteriormente:

from flask import Flask, url_for
...
@app.route("/enlaces")
def enlaces():
        cad='<a href="{0}">Decir hola</a>({0})<br/>'.format(url_for("hola"))
        cad=cad+'<a href="{0}">Decir hola a pepe</a>({0})<br/>'.format(url_for("hola",nombre="pepe"))
        cad=cad+'<a href="{0}">Decir hola a pepe de 16 años</a>({0})'.format(url_for("hola",nombre="pepe",edad=16))
        return cad
...


Si accedemos a la URL observamos los enlaces y las URL a las que se enlazan:

Enlaces

Para acceder a las distintas URLs podemos utilizar varios métodos en nuestra petición HTTP. En nuestros ejemplos vamos a trabajar con el método GET y POST.

@app.route('/articulos/new',methods=["POST"])
def articulos_new():
    return 'Está URL recibe información de un formulario con el método POST'


También en muchas ocasiones es deseable acceder a una URL con los dos métodos, de tal manera que haremos una cosa cuando acedemos con GET y haremos otra cuando se acceda con POST. Ejemplo:

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        return 'Hemos accedido con POST'
    else:
        return 'Hemos accedido con GET'