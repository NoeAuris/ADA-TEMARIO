Git - Practica Web
Un poco mas sobre Clases y Objetos
A partir de ahora, cuando creemos una clase, por defecto vamos a hacer que herede de la clase padre object. Esto es para asegurar compatibilidad entre Python 2 y 3.

Agregaci√≥n
La clase ClaseB forma una relaci√≥n de agregaci√≥n con la clase ClaseA, ya que hace referencia a un objeto ClaseA independiente cuando se inicializa, como uno de sus atributos. Mientras que un objeto ClaseB depende de ClaseA, en caso de destrucci√≥n de ClaseB, ClaseA seguir√° existiendo, ya que es independiente de ClaseB.

Disculpas por las variables sin nombre, por una raz√≥n didactica la realidad es que no nos interesa el contenido:

class ClaseA(object):
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def addNums():
        self.b + self.c

class ClaseB(object):
    def __init__(self, d, e, A):
        self.d = d
        self.e = e
        self.A = A

    def addAllNums(self):
        x = self.d + self.e + self.A.b + self.A.c
        return x

tinga = ClaseA("yo", 2, 6)
ling = ClaseB(5, 9, tinga)

print ling.addAllNums()

Composici√≥n
Al igual que la agregaci√≥n, sin embargo, en lugar de hacer referencia a un objeto independiente, ClaseB en realidad inicializa una instancia de ClaseA en su propio constructor como un atributo. Si el objeto ClaseB se destruye, tambi√©n lo es el objeto ClaseA. Es por eso que la composici√≥n es una relaci√≥n tan fuerte.

class ClaseA(object):
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def addNums():
        self.b + self.c

class ClaseB(object):
    def __init__(self, d, e):
        self.d = d
        self.e = e
        self.A = A("yo", 2, 6)

    def addAllNums(self):
        x = self.d + self.e + self.A.b + self.A.c
        return x

ling = ClaseB(5, 9)

print ling.addAllNums() 

GitHub
Github es un servicio web de control de versiones y desarrollo de software colaborativo basado en Git. Existen otros parecidos por ejemplo GitLab y Bitbucket.

Github es en s√≠ un portal creado para alojar el c√≥digo de las aplicaciones de cualquier desarrollador, y que fue comprada por Microsoft en junio del 2018. La plataforma est√° creada para que los desarrolladores suban el c√≥digo de sus aplicaciones y herramientas, y que como usuario no s√≥lo puedas descargarte la aplicaci√≥n, sino tambi√©n entrar a su perfil para leer sobre ella o colaborar con su desarrollo. Github permite que los desarrolladores alojen proyectos creando repositorios de forma gratuita. Pero hay que tener una cosa en mente, y es que para poder subir gratis los proyectos deber√°n ser de c√≥digo abierto. Y no quieres que tu aplicaci√≥n sea de c√≥digo abierto, la plataforma tambi√©n tiene una versi√≥n de pago para alojar proyectos de forma privada.

Como te hemos mencionado m√°s arriba, en Github tambi√©n puedes entrar a los proyectos de los dem√°s y colaborar para mejorarlos. Esto quiere decir que los usuarios pueden opinar, dejar sus comentarios sobre el c√≥digo, colaborar y contribuir mejorando el c√≥digo. Tambi√©n pueden reportar errores para que los desarrolladores lo mejoren.

Creando nuestro repositorio

1 - En github.com creamos nuestro repositorio llamado: intro-python-ada

2 - Descargamos https://desktop.github.com/ que nos permitir√° hacer los commits y subir el c√≥digo de manera gr√°fica

Al abrirlo deberemos poner nuestro usuario y contrase√±a.

3 - Elegimos el repositorio que acabamos de crear.

4 - Abrimos el PyCharm y Abrirmos esa nueva carpeta.

5 - Para subir los cambios debemos primero commitear, y luego pushear:

Nota: Podemos crear el repositorio directamente desde el programa GitHub Desktop. Tengan en cuenta que el repositorio debe quedar publico:

.gitignore
Una vez que creamos nuestro repositorio, debemos tener en cuenta el archivo .gitignore El punto antes del nombre significa que es un archivo oculto. La idea de este archivo es listar todos los tipos de archivos (o carpetas) que no queremos subir a nuestro repositorio. Este file debe commitearse como cualquier otro archivo de Python.

Un ejemplo de .gitignore es:

# Lo agregamos en clase
.idea

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]

*$py.class

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Flask stuff:
instance/
.webassets-cache

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/


Servicios Web
Un servidor web es un software que forma parte del servidor y tiene como misi√≥n principal devolver informaci√≥n (p√°ginas) cuando recibe peticiones por parte de los usuarios. En otras palabras, es el software que permite que los usuarios que quieren ver una p√°gina web en su navegador puedan hacerlo. Para el funcionamiento correcto de un servidor web necesitamos un cliente web que realice una petici√≥n http o https a trav√©s de un navegador como Chrome, Firefox o Safari y un servidor donde est√© almacenada la informaci√≥n.

El proceso ser√≠a el siguiente:

Tras la primera consulta por parte del usuario hacia una web, se establece una conexi√≥n entre el servidor DNS y el ordenador que realiza la consulta o petici√≥n. Este servidor DNS responde con la direcci√≥n IP correcta del servidor web donde est√° alojado el contenido solicitado.

El siguiente paso ser√≠a solicitar el contenido al servidor web mediante el protocolo HTTP/HTTPS.

Una vez que el servidor web ha recibido la solicitud del contenido solicitado por el cliente web, deber√° procesar la solicitud hasta encontrar el contenido solicitado dentro del dominio correspondiente.

Env√≠a el contenido solicitado al cliente web que lo solicit√≥.

¬øCu√°l es la diferencia entre servidor web y hosting?
Los servidores permiten alojar contenidos que luego son distribuidos de m√∫ltiples maneras, la m√°s com√∫n hoy d√≠a son las p√°ginas web, si bien que los contenidos distribuidos mediante Apps cada vez cobran m√°s protagonismo. La diferencia entre servidor web y hosting m√°s destacada estriba en el presupuesto disponible y los conocimientos para administrar o no un servicio de esta naturaleza con lo que eso conlleva y gestionar adecuadamente los recursos disponibles. En base a esto la pregunta adecuada ser√≠a ¬øpara qu√© vas a utilizar el servicio de alojamiento web? y en base a eso y a tu presupuesto y conocimientos en administraci√≥n de sistemas podr√°s decantarte por contratar hosting web o un servidor web.

Servidor Web con Flask
Flask es un ‚Äúmicro‚Äù Framework escrito en Python y concebido para facilitar el desarrollo de Aplicaciones Web bajo el patr√≥n MVC.

La palabra ‚Äúmicro‚Äù no designa a que sea un proyecto peque√±o o que nos permita hacer p√°ginas web peque√±as sino que al instalar Flask tenemos las herramientas necesarias para crear una aplicaci√≥n web funcional pero si se necesita en alg√∫n momento una nueva funcionalidad hay un conjunto muy grande extensiones (plugins) que se pueden instalar con Flask que le van dotando de funcionalidad.

De principio en la instalaci√≥n no se tienen todas las funcionalidades que se pueden necesitar pero de una manera muy sencilla se pueden extender el proyecto con nuevas funcionalidades por medio de plugins.

Instalacion
En Pycharm, podemos ir a la pesta√±a inferior que dice Terminal y escribir:

pip install flask

Ejemplo base de un servidor
from flask import *
app = Flask(__name__)

@app.route('/')
def home():
   template_data = {
      'titulo' : 'Esto es Python en Ada',
   }
   return render_template('home.html', **template_data)

if __name__ == '__main__':
   app.run(host='0.0.0.0', port=8000, debug=True)


Recordar que debemos agregar el home.html

<html>
<head>
   <title>Hola Chicas! c√≥mo andan?</title>
</head>
<body>
    <h1>Titulo: {{ titulo }}</h1>
</body>
</html>

üöÄ Recursos de la clase
https://learngitbranching.js.org/?locale=es_AR

https://github.com/Ada-IT/bootcamp-frontend/tree/master/01_git

http://rogerdudler.github.io/git-guide/index.es.html