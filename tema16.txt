Debug - Bases de datos - Copilot - Trabajo Final
Debuging o Depurador
Por supuesto, PyCharm puede depurar el código que está ejecutando en nuestro ordenador local, ya se trate de su sistema Python o un virtualenv.

Breakpoint o Punto de interrupción
Un punto de interrupción (breakpoint) marca una línea de código, y cuando Pycharm se ejecuta en esa línea de código, el programa se suspenderá temporalmente.

Configuramos el breakpoint

Para poder debugear debemos dar STOP al programa y volverlo a iniciar, ésta vez en modo Debug:

Ejecutamos el programa en modo Debug

Mientras estamos debugeando podemos ver los valores de las variables:

Vemos los valores de las variables

Tabla de controles:

Controles

Bases de Datos
Aunque python nos ofrece diferentes módulos para conectarnos a los distintos motores de base de datos:

mysql: MySql-Python, PyMySQL, Mysql Conector
postgreSQL
sqlite3
Usaremos la extensión Flask-SQLAlchemy para manejar el modelo de datos de nuestra aplicación. Esta extensión provee un wrapper para el proyecto SQLAlchemy, el cual es un Object Relational Mapper o ORM.

Los ORM permiten a las aplicaciones con base de datos trabajar con objetos en vez de tablas y SQL. Las operaciones realizadas en los objetos son traducidos a comandos de base de datos transparente para el ORM. Por lo tanto se abstrae el gestor de base de datos utilizado, si cambiamos de SGBD no tendremos que cambiar nuestra aplicación. De este modo, por ejemplo, podemos estar trabajando con sqlite3 en nuestro entorno de desarrollo, y con una base de datos PostgreSQL en nuestro entorno de producción.

Los ejemplos aplicados a nuestro Trabajo Final pueden verse directamente en el repo, pero por ejemplo, podemos ver como definiríamos la tabla Persona:

class Persona(db.Model):
    __tablename__ = 'personas'
    id = Column(Integer, primary_key=True)
    nombre = Column(String(100), nullable=False)
    fecha_nacimiento = Column(DateTime, nullable=False)
    dni = Column(String(8), nullable=False)


GitHub Copilot
De acuerdo a GitHub esta nueva tecnología promete ser tu compañero de viajes en el mundo de la programación convirtiéndote a ti en el piloto y hablando todos los lenguajes que conoces, desde JavaScript hasta Python.

Dentro de sus características están:

Convertir comentarios en código.

Un auto-llenado para cuando tengamos código que repetir.

Una forma de testear más rápida y con menos esfuerzo.

Una lista de posibles soluciones de código.

Inclusive te ayudará cuando estés desarrollando en un nuevo lenguaje a predecir el siguiente paso a tomar.

Esta tecnología (que no es tan nueva) promete ser el asistente virtual para desarrolladoras y estudiantes dando mayores herramientas para un entorno de desarrollo más prolijo y con menos errores humanos.

Sin embargo, no todo el código predictivo será perfecto y es inevitable saltarse los procesos creativos propios de la interacción humana.

Instalarlo en Pycham
Para instalar el plugin en Pycharm lo unico que tenemos que hacer es ir a Plugins y buscar Copilot

Copilot

Luego debemos loguearnos en GitHub (recordar la clave!) y activarlo.

Podemos ver que las sugerencias aparecen en gris, y con solo apretar TAB podemos probarlo.

Copilot Working

🚀 Recursos de la clase
https://plataforma.josedomingo.org/pledin/cursos/flask/

Gracias Chicas por la buena onda! Les deseo un 2022 a puro coding!