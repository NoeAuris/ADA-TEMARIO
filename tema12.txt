Servidor Web - Explicacion TP
Ejercicios y dudas clase pasada
https://forms.gle/TD98igY7YAbxVzkX9

Servidor
Hemos armado un servidor web propio, con Flask en Python, pero, volvamos a la teor√≠a para entender qu√© estamos creando:

¬øQu√© es un servidor web?
Los servidores web sirven para almacenar contenidos de Internet y facilitar su disponibilidad de forma constante y segura. Cuando visitas una p√°gina web desde tu navegador, es en realidad un servidor web el que env√≠a los componentes individuales de dicha p√°gina directamente a tu ordenador. Esto quiere decir que para que una p√°gina web sea accesible en cualquier momento, el servidor web debe estar permanentemente online.

En nuestro trabajo, tenemos levantado un servidor en Python. Dicho servidor escucha peticiones del navegador en el puerto 5000 (porque es el puerto por defecto de Flask).

Servidor Web

Qu√© es 127.0.0.1?
Para definir el t√©rmino ¬´localhost¬ª se comienza explicando que se refiere al propio ordenador que se tiene enfrente. Traducido literalmente al castellano, localhost es ‚Äúhu√©sped local‚Äù, pero en la pr√°ctica se utiliza para referirse al dispositivo o al servidor local. As√≠, cuando se llama al host local, el equipo habla, por as√≠ decirlo, consigo mismo o con un servidor instalado en √©l. No obstante, esta definici√≥n se queda corta, pues con localhost no se hace referencia de forma directa al propio PC, sino a su direcci√≥n IP. Cada ordenador suele tener una direcci√≥n IP que le identifica dentro de la red y otra con la cual el usuario navega en Internet, casi siempre din√°mica y por normal general asignada por el proveedor de Internet. La direcci√≥n asociada al localhost, tambi√©n llamada direcci√≥n IP de loopback, es especial e invariable y, si se utiliza un servidor en el propio equipo, sirve para acceder a √©l sin necesidad de salir a Internet.

Esto significa que el t√©rmino encuentra aplicaci√≥n en el contexto de las redes. En este marco, el localhost no denomina solamente al servidor virtual, sino tambi√©n a su nombre de dominio. Como .test, .example, o .invalid; .localhost es un dominio de nivel superior, reservado para prop√≥sitos de documentaci√≥n y comprobaci√≥n. Si se accede al dominio, se activa un bucle reverso o loopback, de modo que si se introduce en el navegador la direcci√≥n localhost, la petici√≥n no se env√≠a a Internet a trav√©s del router, sino que permanece en el sistema. El localhost tiene la direcci√≥n IP 127.0.0.1, la cual hace referencia al servidor en el propio equipo.

Localhost para realizar pruebas
El localhost se utiliza principalmente en el √°mbito de los servidores web y en la programaci√≥n de aplicaciones que tienen que comunicarse a trav√©s de Internet. Durante el proceso de desarrollo de una aplicaci√≥n es muy importante comprobar si esta funciona tal como se hab√≠a planteado una vez se accede a Internet. Pero hay funciones que solo se pueden ejecutar cuando sus archivos se encuentran en el servidor local. Existe una gran diferencia si, por ejemplo, se abre un documento HTML directamente en el ordenador o si se carga en un servidor antes de acceder a √©l. Lo que carece de sentido es publicar un producto sin terminar. Por este motivo, los desarrolladores usan un loopback que les permite simular una conexi√≥n evitando la Red: la conexi√≥n permanece completamente en el sistema.

HTTP
En las versiones del protocolo HTTP/1.1 y anteriores los mensajes eran de formato texto y eran totalmente comprensibles directamente por una persona. En HTTP/2, los mensajes estan estructurados en un nuevo formato binario y las tramas permiten la compresi√≥n de las cabeceras y su multiplexaci√≥n. As√≠ pues, incluso si solamente parte del mensaje original en HTTP se env√≠a en este formato, la sematica de cada mensaje es la misma y el cliente puede formar el mensaje original en HTTP/1.1. Luego, es posible interpretar los mensajes HTTP/2 en el formato de HTTP/1.1.

Existen dos tipos de mensajes HTTP: peticiones y respuestas, cada uno sigue su propio formato.

Peticiones (GET, POST, ...)


Una petici√≥n de HTTP, est√° formado por los siguientes campos:

Un m√©todo HTTP, normalmente pueden ser un verbo, como: GET, POST o un nombre como: OPTIONS (en-US) o HEAD (en-US), que defina la operaci√≥n que el cliente quiera realizar.

El objetivo de un cliente, suele ser una petici√≥n de recursos, usando GET, o presentar un valor de un formulario HTML, usando POST, aunque en otras ocasiones puede hacer otros tipos de peticiones.

La direcci√≥n del recurso pedido; la URL del recurso, sin los elementos obvios por el contexto, como pueden ser: sin el protocolo (http://), el dominio (aqu√≠ developer.mozilla.org), o el puerto TCP (aqu√≠ el 80 o 5000 en nuestro caso).

La versi√≥n del protocolo HTTP.

Cabeceras HTTP opcionales, que pueden aportar informaci√≥n adicional a los servidores. O un cuerpo de mensaje, en alg√∫n m√©todo, como puede ser POST, en el cual env√≠a la informaci√≥n para el servidor.

Respuestas
Un ejemplo de repuesta:

Las respuestas est√°n formadas por los siguentes campos:

La versi√≥n del protocolo HTTP que est√°n usando.

Un c√≥digo de estado, indicando si la petici√≥n ha sido exitosa, o no, y debido a que.

Un mensaje de estado, una breve descripci√≥n del c√≥digo de estado.

Cabeceras HTTP, como las de las peticiones.

Opcionalmente, el recurso que se ha pedido.

üöÄ Recursos de la clase
https://developer.mozilla.org/es/docs/Web/HTTP/Overview

https://www.techwithtim.net/tutorials/flask/adding-bootstrap/