Presentacion, Ejemplo, Variables
üèÅ Objetivos
Enamorarse de la programaci√≥n, en especial del lenguaje.
Poder entender c√≥digo Python ya escrito, entender nuevos requerimientos y ser capaces de escribir un algoritmo que lo resuelva.
Levantar un Servidor Web escrito en Python (con Flask).
Manejarse con Git y algunos comandos b√°sicos en la Terminal.
Uso de base de datos para la persistencia de la informaci√≥n.
Bienvenidas a Python!
Python es un lenguaje de alto nivel que permite expresar algoritmos de forma casi directa, ha llegado a considerarse pseudoc√≥digo ejecutable, y est√° comprobado que se trata de un lenguaje particularmente adecuado para la ense√±anza de la programaci√≥n. Est√°n en el mejor lugar!

Algunas otras ventajas:

Su uso no est√° ligado a un sector concreto. Por ejemplo el lenguaje R es √∫til para an√°lisis de datos, pero no puede ser usado para desarrollo web. Python vale para todo.
Tiene una comunidad enorme, adem√°s de gran cantidad de librer√≠as para hacer pr√°cticamente cualquier cosa, literalmente.
Es un lenguaje multiplataforma, por lo que el mismo c√≥digo es compatible en cualquier plataforma (Windows, macOS, Linux) sin hacer nada.
Por lo general se puede hacer desarrollos en Python m√°s r√°pidamente que en otros lenguajes, acortando la duraci√≥n de los proyectos.
Algoritmos
Los algoritmos son independientes del lenguaje de programaci√≥n. Describen un procedimiento que puedes implementar en cualquier lenguaje de programaci√≥n de prop√≥sito general, incluso, que puedes ejecutar a mano con l√°piz, papel y, quiz√°, la ayuda de una calculadora.

El primer programa que escrib√≠ yo: Calcula tu peso en la luna

Como han visto en la televisi√≥n, en la luna los astronautas parecen volar o saltar muy alto, la raz√≥n es simple, la gravedad en la luna no es igual a la de la tierra. Por esta raz√≥n, si pusieramos una balanza en la luna, y nos pesaramos, no nos dar√≠a la misma cantidad de kg que en la Tierra.

En programaci√≥n me gusta pensar que resolvemos problemas, en este caso el problema es encontrar nuestro peso en la luna, y el dato para resolverlo es: en la luna pesas 1 sexto de lo que pesas en la Tierra.

C√≥mo lo calcular√≠amos? Si yo peso 50kg, entonces tengo que dividir 50 por seis, y ese ser√≠a el valor que dir√≠a la balanza si estuvieramos en la luna.

Pero estamos aprendiendo programaci√≥n, quiero hacer un programa Meri, no quiero practicar matem√°tica!

Decribimos entonces el procedimiento:

Pesarme, si no se mi peso en la Tierra menos en la Luna.
Calcular 1/6 de ese peso.
Imprimir resultado
Pseudoc√≥digo
Lo nombr√© antes y es la forma de aprender a programar. Es escribir los pasos en una forma que luego pueda pasar a cualquier lenguaje.

obtengo el peso
lo divido
lo muestro en la pantalla
en Python esto ser√≠a algo como:

input(peso)
peso/6
print(peso)

Sintaxis Python
El termino sintaxis hace referencia al conjunto de reglas que definen como se tiene que escribir el c√≥digo en un determinado lenguaje de programaci√≥n. Es decir, hace referencia a la forma en la que debemos escribir las instrucciones para que el ordenador, o m√°s bien lenguaje de programaci√≥n, nos entienda. A continuaci√≥n veremos la sintaxis de Python, viendo como podemos empezar a usar el lenguaje creando nuestras primeras variables y estructuras de control.

En la mayor√≠a de lenguajes existe una sintaxis com√∫n, como por ejemplo el uso de = para asignar un dato a una variable, o el uso de {} para designar bloques de c√≥digo, pero Python tiene ciertas particularidades.

La sintaxis es a la programaci√≥n lo que la gram√°tica es a los idiomas. De la misma forma que la frase ‚ÄúYo estamos aqu√≠‚Äù no es correcta, el siguiente c√≥digo en Python no ser√≠a correcto, ya que no respeta las normas del lenguaje.

if ($variable){
    x=9;
}

Lo veremos a continuaci√≥n en detalle, pero Python no soporta el uso de $ ni hace falta terminar las l√≠neas con ; como en otros lenguajes, y tampoco hay que usar {} en estructuras de control como en el if.

Por otro lado, de la misma forma que un idioma no se habla son simplemente saber todas sus palabras, en la programaci√≥n no basta con saber la sintaxis de un lenguaje para programar correctamente en √©l. Es cierto que sabiendo la sintaxis podremos empezar a programar y a hacer lo que queramos, pero el uso de un lenguaje de programaci√≥n va mucho m√°s all√° de la sintaxis.

Palabras reservadas
Las palabras reservadas, como su nombre lo indican, son palabras las cuales el lenguaje de programaci√≥n ya ha reservado para realizar ciertas tareas.

import keyword
print(keyword.kwlist)
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']


Comentarios
Los comentarios son bloques de texto usados para comentar el c√≥digo. Es decir, para ofrecer a otros programadores o a nuestro yo futuro informaci√≥n relevante acerca del c√≥digo que est√° escrito. A efectos pr√°cticos, para Python es como si no existieran, ya que no son c√≥digo propiamente dicho, son solo anotaciones. Los comentarios se inician con # y todo lo que vaya despu√©s en la misma l√≠nea ser√° considerado un comentario.

# Esto es un comentario

Al igual que en otros lenguajes de programaci√≥n, podemos tambi√©n comentar varias l√≠neas de c√≥digo. Para ello es necesario hacer uso de triples comillas bien sean simples ' o dobles ". Es necesario usarlas para abrir el bloque del comentario y para cerrarlo.

'''
Esto es un comentario
de varias l√≠neas
de c√≥digo
'''

Variables
Ahora bien, el c√≥digo que escribimos anteriormente no anda si primero no hablamos de variables: Una variable se refiere a un dato suceptible de ser modificado. Por otro lado, podemos agregar y mencionar las constantes: Una constante es un dato que no cambia de valor.

En nuestro c√≥digo: peso -> variable 6 (proporci√≥n peso Tierra en la Luna) -> constante

Las otras dos cosas que necesito explicar son input() y print() En Python, como en todos los leguajes, existen funciones que nos permiten interactuar. Hay muchas, y podemos importar librer√≠as para usar muchas mas, se aprenden a medida que se usan y no es obligatorio saberlas de memoria, se googlean :)

input() -> nos permite leer un valor que es ingresado por el usuario print() -> nos permite imprimir y mostrarle al usuario el valor de una variable o constante

proporcion_luna = 6
peso = input()
peso = peso / proporcion_luna
print(peso)

Funciones
No podemos comenzar a programar, en mi opinion, si no hablamos de funciones: una abstracci√≥n de un grupo de operaciones o un algoritmo.

Supongamos que queremos ahora calcular nuestro peso en Mercurio:

proporcion_mercurio = 3
peso = input()
peso = peso / proporcion_mercurio
print(peso)

Podemos hacer una funcion a la cual le indicamos la proporcion:

proporcion_luna = 6
proporcion_mercurio = 3
peso = int(input())

def calculadora_de_peso(peso, proporcion):
    peso = peso / proporcion
    print(peso)

calculadora_de_peso(peso, proporcion_luna)
calculadora_de_peso(peso, proporcion_mercurio)

El ejemplo anterior tiene un problema de compatibilidad entre Python2 y Python3. Para entenderlo, hay que leer la siguiente seccion: Tipos de datos.

Si tenemos tiempo: qu√© problema tiene si lo corremos con Python2? Para responder, tenemos que ejecutar el programa (peso.py) con nuestro peso y comparar el valor con el valor haciendo la cuenta con calculadora.

Tipos de datos en Python
https://j2logo.com/python/tutorial/tipos-de-datos-basicos-de-python/

Num√©ricos
El tipo de los n√∫meros enteros es int. Este tipo de dato comprende el conjunto de todos los n√∫meros enteros.

Y los no enteros?
Este tipo de datos en Python es float. Puedes usar el tipo float sin problemas para representar cualquier n√∫mero real (siempre teniendo en cuenta que es una aproximaci√≥n lo m√°s precisa posible). Por tanto para longitudes, pesos, frecuencias, ‚Ä¶, en los que pr√°cticamente es lo mismo 3,3 que 3,3000000000000003 el tipo float es el m√°s apropiado.

Boolean o booleanos
En Python la clase que representa los valores booleanos es bool. Esta clase solo se puede instanciar con dos valores/objetos: True para representar verdadero y False para representar falso. Prestar atenci√≥n que empiezan con may√∫sculas!

String o cadena de caracteres
Una vez que hemos acabado con los n√∫meros, es el turno de las letras üòú Otro tipo b√°sico de Python, e imprescindible, son las secuencias o cadenas de caracteres. Este tipo es conocido como string aunque su clase verdadera es str. Formalmente, un string es una secuencia inmutable de caracteres en formato Unicode. Para crear un string, simplemente tienes que encerrar entre comillas simples '' o dobles "" una secuencia de caracteres.

Otros
Hasta aqu√≠ hemos repasado los tipos de datos b√°sicos de Python, sin embargo, el lenguaje ofrece muchos tipos m√°s.

Las listas son secuencias mutables de valores. Las tuplas son secuencias inmutables de valores. Los conjuntos se utilizan para representar conjuntos √∫nicos de elementos, es decir, en un conjunto no pueden existir dos objetos iguales. Los diccionarios son tipos especiales de contenedores en los que se puede acceder a sus elementos a partir de una clave √∫nica.

lista = [1, 2, 3, 8, 9]
tupla = (1, 4, 8, 0, 5)
conjunto = set([1, 3, 1, 4])
diccionario = {'a': 1, 'b': 3, 'z': 8}
print(lista)
[1, 2, 3, 8, 9]
print(tupla)
(1, 4, 8, 0, 5)
print(conjunto)
{1, 3, 4}
print(diccionario)
{'a': 1, 'b': 3, 'z': 8}

Herramientas de desarrollo
https://ellibrodepython.com/descargar-instalar-python

La consola
Depende del sistema operativo. En Windows se llama cmd: https://www.muycomputer.com/2018/10/25/consola-de-windows-guia/ En MacOs y Linux se llama terminal.

Pero una buena forma comenzar sin frustraciones es usar una herramienta online, por ejemplo: https://www.online-python.com/

YAPA: The Zen of Python
El Zen de Python es una colecci√≥n de los 19 principios que influyen en el dise√±o del lenguaje. De alguna manera, muestran la filosof√≠a del mismo y pueden ser encontrados en la PEP20[9] Las PEP o Python Enhancement Prososals son unos documentos que ofrecen informaci√≥n a la comunidad de Python, bien describiendo alguna caracter√≠stica nueva o dando informaci√≥n en general.

Son las siguientes, y aunque alguna pueda parecer l√≥gica, a veces resultan no serlo tanto cuando no se cumplen:

Bello es mejor que feo.
Expl√≠cito es mejor que impl√≠cito.
Simple es mejor que complejo.
Complejo es mejor que complicado.
Plano es mejor que anidado.
Espaciado es mejor que denso.
La legibilidad es importante.
Los casos especiales no son lo suficientemente especiales como para romper las reglas.
Sin embargo la practicidad gana a la pureza.
Los errores nunca deben pasar silenciosamente.
A menos que se silencien expl√≠citamente.
Frente a la ambig√ºedad, evitar la tentaci√≥n de adivinar.
Deber√≠a haber una, y preferiblemente solo una, manera obvia de hacerlo.
A pesar de que esa manera no sea obvia a menos que seas Holand√©s (el creador lo era)
Ahora es mejor que nunca.
A pesar de que nunca es muchas veces mejor que ahora mismo.
Si la implementaci√≥n es dif√≠cil de explicar, es una mala idea.
Si la implementaci√≥n es f√°cil de explicar, puede que sea una buena idea.
Los namespaces son una gran idea, ¬°tengamos m√°s de esos!
Documentaci√≥n
https://docs.python.org/3.10/tutorial/index.html